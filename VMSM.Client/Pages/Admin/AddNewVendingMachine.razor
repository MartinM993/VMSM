@page "/vendingmachines/addnew"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@attribute [Authorize(Roles = nameof(Role.Admin))]

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="row col-12">
            <Chase Center="true" Color="#1E90FF" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <EditForm Model="@vendingMachine" OnValidSubmit="CreateVendingMachine" class="formBorder magin-top-15">
                        <DataAnnotationsValidator />
                        <h3 class="text-center h3-style">Create new address</h3>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Name:</label>
                            </div>
                            <div class="col-6">
                                <RadzenTextBox @bind-Value="@vendingMachine.Name" />
                                <ValidationMessage For="@(() => vendingMachine.Name)" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Model:</label>
                            </div>
                            <div class="col-6">
                                <RadzenTextBox @bind-Value="@vendingMachine.Model" />
                                <ValidationMessage For="@(() => vendingMachine.Model)" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Code:</label>
                            </div>
                            <div class="col-6">
                                <RadzenTextBox @bind-Value="@vendingMachine.Code" />
                                <ValidationMessage For="@(() => vendingMachine.Code)" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Production Year:</label>
                            </div>
                            <div class="col-6">
                                <RadzenNumeric @bind-Value="@vendingMachine.ProductionYear" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Address:</label>
                            </div>
                            <div class="col-6">
                                <RadzenDropDown @bind-Value="@vendingMachine.AddressId"
                                                TextProperty="Text"
                                                ValueProperty="Value"
                                                Placeholder="Select address.."
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowFiltering="true"
                                                Data="@(addresses.Select(x => new { Text = $"{x.Town} - {x.Line1}", Value = x.Id }))">
                                    <ValidationMessage For="@(() => vendingMachine.AddressId)" />
                                </RadzenDropDown>
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Category:</label>
                            </div>
                            <div class="col-6">
                                <RadzenDropDown @bind-Value="@vendingMachine.Category"
                                                TextProperty="Text"
                                                ValueProperty="Value"
                                                AllowClear="true"
                                                Data="@(Enum.GetValues(typeof(VendingMachineCategory)).Cast<VendingMachineCategory>().Select(x => new { Text = $"{x}", Value = x }))" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Is Active:</label>
                            </div>
                            <div class="col-6">
                                <RadzenCheckBox @bind-Value="@vendingMachine.IsActive" TValue="bool" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-6 text-right">
                                <label class="magin-top-5">Machine Cost:</label>
                            </div>
                            <div class="col-6">
                                <RadzenNumeric @bind-Value="@vendingMachine.MachineCost" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6 text-right">
                                <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Danger" Click="Cancel" />
                            </div>
                            <div class="col-6">
                                <RadzenButton type="submit" Text="Create" ButtonStyle="ButtonStyle.Success" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>

@code {
    bool isLoading = true;
    VendingMachine vendingMachine = new VendingMachine();
    List<Address> addresses = new List<Address>();

    protected override async Task OnInitializedAsync()
    {
        addresses = await _http.GetJsonAsync<List<Address>>(Routes.Address.Root);

        isLoading = false;
    }

    async Task CreateVendingMachine()
    {
        var notificationMessage = new NotificationMessage
        {
            Summary = "Create vending machine:",
            Severity = NotificationSeverity.Error,
            Duration = 4000
        };

        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Post, Routes.VendingMachine.Root, vendingMachine);
        notificationMessage.Detail = actionResult.Message;

        if (actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Success;
            _notificationService.Notify(notificationMessage);
            //await Task.Delay(5000);
            _navigationManager.NavigateTo("/vendingmachines");
        }
        else
        {
            _notificationService.Notify(notificationMessage);
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo("/vendingmachines");
    }
}
