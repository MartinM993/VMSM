@page "/users/changevehicleoraddress"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@attribute [Authorize(Roles = nameof(Role.Admin))]

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="row col-12">
            <Chase Center="true" Color="#1E90FF" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <EditForm Model="user" OnValidSubmit="@UpdateUser" class="formBorder magin-top-15">
                        <DataAnnotationsValidator />
                        <p class="text-center h3-style">Add/Change Users Vehicle/Address</p>
                        <div class="row form-group">
                            <div class="col-3 text-right">
                                <label class="magin-top-5">User:</label>
                            </div>
                            <div class="col-9">
                                <RadzenDropDown @bind-Value="@user.EntityId"
                                                TextProperty="Text"
                                                ValueProperty="Value"
                                                AllowClear="true"
                                                Placeholder="Select user.."
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowFiltering="true"
                                                Style="width: 90%"
                                                Name="test"
                                                Data="@(appUsers.Select(x => new { Text = $"{x.Name} {x.MiddleName} {x.LastName}", Value = x.Id }))" />
                                <ValidationMessage For="@(() => user.EntityId)" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-3 text-right">
                                <label class="magin-top-5">Address:</label>
                            </div>
                            <div class="col-9">
                                <RadzenDropDown @bind-Value="@user.AddressId"
                                                TextProperty="Text"
                                                ValueProperty="Value"
                                                AllowClear="true"
                                                Placeholder="Select address.."
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowFiltering="true"
                                                Style="width: 90%"
                                                Data="@(addresses.Select(x => new { Text = $"{x.Town} - {x.Line1}", Value = x.Id }))" />
                                <ValidationMessage For="@(() => user.AddressId)" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-3 text-right">
                                <label class="magin-top-5">Vehicle:</label>
                            </div>
                            <div class="col-9">
                                <RadzenDropDown @bind-Value="@user.VehicleId"
                                                TextProperty="Text"
                                                ValueProperty="Value"
                                                AllowClear="true"
                                                Placeholder="Select vehicle.."
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowFiltering="true"
                                                Style="width: 90%"
                                                Data="@(vehicles.Select(x => new { Text = $"{x.Model} - {x.Code}", Value = x.Id }))" />
                                <ValidationMessage For="@(() => user.VehicleId)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6 text-right">
                                <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Danger" Click="Cancel" />
                            </div>
                            <div class="col-6">
                                <RadzenButton type="submit" Text="Save" ButtonStyle="ButtonStyle.Success" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
            <div class="row magin-top-15">
                <RadzenGrid Data="@appUsers.Where(x => x.Id == user.EntityId)"
                            TItem="AppUser">
                    <Columns>
                        <RadzenGridColumn TItem="AppUser" Property="Name" Title="Personal information for selected user">
                            <Template Context="appUser">
                                @appUser.Name @appUser.MiddleName @appUser.LastName
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="AppUser" Property="Address.Line1" Title="Address information for selected user">
                            <Template Context="appUser">
                                @appUser.Address.Town - @appUser.Address.Line1 @appUser.Address.Line2
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="AppUser" Property="Vehicle.RegistrationPlate" Title="Vehicle information for selected user">
                            <Template Context="appUser">
                                @appUser.Vehicle?.Brand: @appUser.Vehicle?.Model - @appUser.Vehicle?.RegistrationPlate
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>
            <div class="row magin-top-15">
                <RadzenGrid Data="@addresses.Where(x => x.Id == user.AddressId)"
                            TItem="Address">
                    <Columns>
                        <RadzenGridColumn TItem="Address" Property="Town" Title="Town"></RadzenGridColumn>
                        <RadzenGridColumn TItem="Address" Property="ZipCode" Title="Zip Code"></RadzenGridColumn>
                        <RadzenGridColumn TItem="Address" Property="Line1" Title="Address">
                            <Template Context="address">
                                @address.Line1 @address.Line2
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>
            <div class="row magin-top-15">
                <RadzenGrid Data="@vehicles.Where(x => x.Id == user.VehicleId)"
                            TItem="Vehicle">
                    <Columns>
                        <RadzenGridColumn TItem="Vehicle" Property="Brand" Title="Brand"></RadzenGridColumn>
                        <RadzenGridColumn TItem="Vehicle" Property="Model" Title="Model"></RadzenGridColumn>
                        <RadzenGridColumn TItem="Vehicle" Property="Code" Title="Code"></RadzenGridColumn>
                        <RadzenGridColumn TItem="Vehicle" Property="RegistrationPlate" Title="Registration Plate"></RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>

@code {
    bool isLoading = true;
    ChangeVehicleOrAddress user = new ChangeVehicleOrAddress();
    IList<AppUser> appUsers;
    IList<Address> addresses;
    IList<Vehicle> vehicles;
    CustomActionResult actionResultPut;

    protected override async Task OnInitializedAsync()
    {
        appUsers = await _http.GetJsonAsync<IList<AppUser>>(Routes.User.Root);
        addresses = await _http.GetJsonAsync<IList<Address>>(Routes.Address.Root);
        vehicles = await _http.GetJsonAsync<IList<Vehicle>>(Routes.Vehicle.WithoutUser);

        isLoading = false;
    }

    async Task UpdateUser()
    {
        var actionResultGet = await _http.GetJsonAsync<CustomActionResultEntity<AppUser>>(Routes.User.ById.Replace("{id}", user.EntityId.ToString()));
        var notificationMessage = new NotificationMessage
        {
            Summary = "Update user Address and/or Vehicle:",
            Duration = 4000,
            Detail = actionResultGet.Message
        };

        if (actionResultGet.Successful)
        {
            var appUser = actionResultGet.Entity;

            if (user.AddressId > 0)
            {
                appUser.AddressId = user.AddressId;
            }

            if (user.VehicleId > 0)
            {
                appUser.VehicleId = user.VehicleId;
            }

            actionResultPut = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Put, Routes.User.ById.Replace("{id}", user.EntityId.ToString()), appUser);
            notificationMessage.Detail = actionResultPut.Message;


            if (!actionResultPut.Successful)
            {
                notificationMessage.Severity = NotificationSeverity.Error;
            }
            else
            {
                notificationMessage.Severity = NotificationSeverity.Success;
                _notificationService.Notify(notificationMessage);
                _navigationManager.NavigateTo("/users");
            }
        }
        else
        {
            notificationMessage.Severity = NotificationSeverity.Error;
            _notificationService.Notify(notificationMessage);
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo("/users");
    }
}
