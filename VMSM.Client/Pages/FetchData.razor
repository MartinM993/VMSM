@page "/fetchdata"
@using VMSM.Contracts
@using VMSM.Contracts.Entities
@using VMSM.Contracts.Requests
@using System.Collections.Generic
@using VMSM.Contracts.Enums
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (tmp == null)
{

    <p>@exMess</p>
    <p>@exMess1</p>
}
else
{

    <p><em>@tmp.Quantity</em></p>
    <p><em>@tmp.Product.Name</em></p>
    <p><em>@tmp.Product.Code</em></p>

    <p>@exMess1</p>
}

@code {
    private WeatherForecast[] forecasts;
    private FieldWorkerProduct tmp = null;
    private string exMess;
    private string exMess1;
    private List<User> users = new List<User>();
    private string queryString;

    protected override async Task OnInitializedAsync()
    {
        //decimal pp = 120;
        //decimal tax = 5;
        //decimal rebate = 5;
        //var product = new Product
        //{
        //    Name = "Ristora",
        //    Code = "rist159",
        //    PurchasePrice = pp,
        //    Tax = tax,
        //    Rebate = rebate,
        //    Profit = tax + rebate,
        //    Quantity = 5,
        //    SellingPieces = 1
        //};

        //product.SetAudit(1);

        //var productId = await Http.SendJsonAsync<int>(HttpMethod.Post, Routes.Product.Root, product);
        //var p = await Http.GetJsonAsync<Product>(Routes.Product.ById.Replace("{id}", productId.ToString()));
        //p.Code = "rostora premium";

        //await Http.SendJsonAsync(HttpMethod.Put, Routes.Product.ById.Replace("{id}", p.Id.ToString()), p);

        //var tmp1 = new FieldWorkerProduct
        //{
        //    FieldWorkerId = 1,
        //    ProductId = p.Id,
        //    Quantity = 5
        //};

        //var tmp1Id = await Http.SendJsonAsync<int>(HttpMethod.Post, Routes.FieldWorkerProduct.Root, tmp1);
        tmp = await Http.GetJsonAsync<FieldWorkerProduct>(Routes.FieldWorkerProduct.ById.Replace("{id}", "1"));


        //var z = await Http.SendJsonAsync<int>(HttpMethod.Put, Routes.FieldWorkerProduct.ById.Replace("{id}", "1"), t);
        //tmp = await Http.GetJsonAsync<FieldWorkerProduct>(Routes.FieldWorkerProduct.ById.Replace("{id}", "1"));
    }

    private string GetQuery(VendingMachineSearchRequest request)
    {
        List<string> parameters = new List<string>();

        if (!string.IsNullOrWhiteSpace(request.Name))
            parameters.Add($"Name={request.Name}");


        var queryString = string.Empty;
        if (parameters.Any())
        {
            queryString = $"?{string.Join("&", parameters)}";
        };

        return queryString;
    }

}
