@page "/fetchdata"
@using VMSM.Contracts
@using VMSM.Contracts.Entities
@using VMSM.Contracts.Requests
@using System.Collections.Generic
@using VMSM.Contracts.Enums
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (user == null)
{

    <p>@exMess</p>
    <p>@exMess1</p>
}
else
{

    <p><em>@user.Name</em></p>
    
    
    <p>@exMess1</p>
}

@code {
    private WeatherForecast[] forecasts;
    private User user = null;
    private string exMess;
    private string exMess1;
    private List<User> users = new List<User>();
    private string queryString;

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetJsonAsync<WeatherForecast[]>(Routes.Test.Root);
        //var id = "3";
        //var userTmp = await Http.GetJsonAsync<User>(Routes.User.ById.Replace("{id}", id));

        user = await Http.GetJsonAsync<User>(Routes.User.ById.Replace("{id}", "1"));


        //queryString = GetQuery(new VendingMachineSearchRequest
        //{
        //    Name = "ven"
        //});


        //users = await Http.GetJsonAsync<List<User>>("api/users" + queryString);
        //Address adr = await Http.GetJsonAsync<Address>(Routes.Address.ById.Replace("{id}", "1"));

        //########### Post
        //var userTmp = new User
        //{
        //    Name = "Martin",
        //    LastName = "Test",
        //    Email = "martin@m.com",
        //    Password = "pass123",
        //    PhoneNumber = "075123456",
        //    Role = Role.Admin,
        //    Address = adr
        //};

        //var address = new VendingMachine
        //{
        //    Name = "Venecia",
        //    Model = "1230p",
        //    Code = "mm159",
        //    ProductionYear = 1995,
        //    AddressId = 1
        //};

        //address.SetAudit(1);

        //await Http.SendJsonAsync<int>(HttpMethod.Post, Routes.VendingMachine.Root, address);
        //var addresses = await Http.GetJsonAsync<List<VendingMachine>>(Routes.VendingMachine.Root + queryString);
        //addresses[0].Name = "Spacio";
        //addresses[0].SetAudit(1);
        //var id = await Http.SendJsonAsync<int>(HttpMethod.Put, Routes.VendingMachine.ById.Replace("{id}", addresses[0].Id.ToString()), addresses[0]);
        //user = await Http.GetJsonAsync<VendingMachine>(Routes.VendingMachine.ById.Replace("{id}", id.ToString()));


        //user = await Http.GetJsonAsync<VendingMachine>(Routes.VendingMachine.ById.Replace("{id}", "1"));

        //userTmp.SetAudit(1);

        //var userId = await Http.SendJsonAsync<int>(HttpMethod.Post, Routes.User.Root, userTmp);
        //user = await Http.GetJsonAsync<User>(Routes.User.ById.Replace("{id}", userId.ToString()));

        // ############# put
        //userTmp.LastName = "Milutinovic";
        //userTmp.MiddleName = "M";
        //userTmp.SetAudit(1);

        //await Http.SendJsonAsync(HttpMethod.Put, Routes.User.ById.Replace("{id}", userTmp.Id.ToString()), userTmp);

        //user = await Http.GetJsonAsync<User>(Routes.User.ById.Replace("{id}", id));

        //await Http.DeleteAsync(Routes.Address.ById.Replace("{id}", "2"));
    }

    private string GetQuery(VendingMachineSearchRequest request)
    {
        List<string> parameters = new List<string>();

        if (!string.IsNullOrWhiteSpace(request.Name))
            parameters.Add($"Name={request.Name}");


        var queryString = string.Empty;
        if (parameters.Any())
        {
            queryString = $"?{string.Join("&", parameters)}";
        };

        return queryString;
    }

}
