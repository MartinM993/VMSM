@page "/fetchdata"
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (tmp == null)
{

    <p>@exMess</p>
    <p>@exMess1</p>
}
else
{

    <p><em>@tmp.Day</em></p>
    //<p><em>@tmp.VendingMachine.Code</em></p>

    <p>@exMess1</p>
}

@code {
    private WeatherForecast[] forecasts;
    private Schedule tmp = null;
    private string exMess;
    private string exMess1;
    //private List<User> users = new List<User>();
    private string queryString;

    protected override async Task OnInitializedAsync()
    {

        //var sch = new Schedule
        //{
        //    Day = Day.Monday,
        //    FieldWorkerId = 1
        //};

        //var id = await Http.SendJsonAsync<int>(HttpMethod.Post, Routes.Schedule.Root, sch);
        var byId = await Http.GetJsonAsync<Schedule>(Routes.Schedule.ById.Replace("{id}", "1"));
        var search = new ScheduleSearchRequest
        {
            Day = Day.Monday
        };

        queryString = GetQuery(search);
        var users = await Http.GetJsonAsync<List<Schedule>>(Routes.Schedule.Root + queryString);
        tmp = users[0];
    }

    private string GetQuery(ScheduleSearchRequest request)
    {
        List<string> parameters = new List<string>();

        if (request.Day.HasValue)
            parameters.Add($"Day={request.Day.ToString()}");


        var queryString = string.Empty;
        if (parameters.Any())
        {
            queryString = $"?{string.Join("&", parameters)}";
        };

        return queryString;
    }

}
