@page "/user/{id:int}"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="row col-12">
            <Chase Center="true" Color="#1E90FF" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <ChangePasswordForm ButtonText="Save" ChangePassword="changePassword" OnValidSubmit="ChangePassword" />
        <UserForm ButtonText="Save" User="user" OnValidSubmit="@EditUser" />
        <AddressForm ButtonText="Save" Address="address" OnValidSubmit="@EditAddress" />

        @if (user.Vehicle != null)
        {
            <VehicleForm ButtonText="Save" Vehicle="@vehicle" OnValidSubmit="@EditVehicle" DisableTextBox="DisableTextBox" VisibleButton="VisibleButton" />
        }
    </ContentTemplate>
</SpinLoader>

@code {
    [Parameter] public int id { get; set; }
    AppUser user = new AppUser();
    Address address = new Address();
    Vehicle vehicle = new Vehicle();
    ChangePassword changePassword = new ChangePassword();
    string email = string.Empty;
    bool DisableTextBox = true;
    bool VisibleButton = false;
    bool isLoading = true;

    protected async override Task OnParametersSetAsync()
    {
        var customActionResult = await _http.GetJsonAsync<CustomActionResultEntity<AppUser>>(Routes.User.ById.Replace("{id}", id.ToString()));
        user = customActionResult.Entity;
        address = user.Address;
        email = user.Email;

        if (user.Vehicle != null)
        {
            vehicle = user.Vehicle;
        }

        isLoading = false;
    }

    async Task ChangePassword()
    {
        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Post, Routes.Account.ChangePassword, changePassword);
        var notificationMessage = new NotificationMessage
        {
            Summary = "Change Password:",
            Detail = actionResult.Message,
            Severity = NotificationSeverity.Success,
            Duration = 4000
        };

        if (!actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Error;
        }

        _notificationService.Notify(notificationMessage);
    }

    async Task EditUser()
    {
        var notificationMessage = new NotificationMessage
        {
            Summary = "Update user information:",
            Severity = NotificationSeverity.Success,
            Duration = 4000
        };

        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Put, Routes.User.ById.Replace("{id}", id.ToString()), user);
        notificationMessage.Detail = actionResult.Message;

        if (!actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Error;
        }

        _notificationService.Notify(notificationMessage);
    }

    async Task EditAddress()
    {
        var notificationMessage = new NotificationMessage
        {
            Summary = "Update user information:",
            Severity = NotificationSeverity.Success,
            Duration = 4000
        };

        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Put, Routes.Address.ById.Replace("{id}", user.AddressId.ToString()), user);
        notificationMessage.Detail = actionResult.Message;

        if (!actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Error;
        }

        _notificationService.Notify(notificationMessage);
    }

    async Task EditVehicle()
    {
        await _http.SendJsonAsync(HttpMethod.Put, Routes.Vehicle.ById.Replace("{id}", user.VehicleId?.ToString()), user);
    }
}
