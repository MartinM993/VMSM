@page "/fieldworkervendingmachines/addnew"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@attribute [Authorize(Roles = nameof(Role.FieldWorker))]

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="row col-12">
            <Chase Center="true" Color="#1E90FF" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <AddProductInVendingMachine Product="@vendingMachineProduct"
                                    VendingMachines="@vendingMachines"
                                    Products="@products"
                                    UserRole="Role.FieldWorker"
                                    OnValidSubmit="@Create"
                                    OnCancel="@Cancel"/>
    </ContentTemplate>
</SpinLoader>

@code {
    bool isLoading = true;
    VendingMachineProduct vendingMachineProduct = new VendingMachineProduct();
    IList<VendingMachine> vendingMachines;
    IList<Product> products;

    protected override async Task OnInitializedAsync()
    {
        var user = await _http.GetJsonAsync<AppUser>(Routes.User.CurrentLoggedUser);
        var queryString = GetQuery(new ScheduleSearchRequest
        {
            FieldWorkerId = user.Id
        });

        var schedules = await _http.GetJsonAsync<IList<Schedule>>(Routes.Schedule.Root + queryString);
        var vendingMachineSchedules = new List<VendingMachineSchedule>();
        foreach (var schedule in schedules)
        {
            vendingMachineSchedules.AddRange(schedule.VendingMachineSchedules);
        }
        vendingMachines = vendingMachineSchedules.Select(x => x.VendingMachine).GroupBy(x => x.Id).Select(x => x.First()).ToList();
        products = await _http.GetJsonAsync<IList<Product>>(Routes.Product.Root);

        isLoading = false;
    }

    async Task Create()
    {
        var notificationMessage = new NotificationMessage
        {
            Summary = "Add Product in Vending Machine:",
            Severity = NotificationSeverity.Error,
            Duration = 4000
        };

        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Post, Routes.VendingMachineProduct.Root, vendingMachineProduct);
        notificationMessage.Detail = actionResult.Message;

        if (actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Success;
            _notificationService.Notify(notificationMessage);
            //await Task.Delay(5000);
            _navigationManager.NavigateTo("/fieldworkervendingmachines");
        }
        else
        {
            _notificationService.Notify(notificationMessage);
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo("/fieldworkervendingmachines");
    }

    private string GetQuery(ScheduleSearchRequest request)
    {
        List<string> parameters = new List<string>();

        if (!string.IsNullOrWhiteSpace(request.FieldWorkerName))
            parameters.Add($"FieldWorkerName={request.FieldWorkerName}");
        if (!string.IsNullOrWhiteSpace(request.FieldWorkerLastName))
            parameters.Add($"FieldWorkerLastName={request.FieldWorkerLastName}");
        if (request.Day.HasValue)
            parameters.Add($"Day={request.Day}");
        if (request.FieldWorkerId.HasValue)
            parameters.Add($"FieldWorkerId={request.FieldWorkerId}");

        var queryString = string.Empty;
        if (parameters.Any())
        {
            queryString = $"?{string.Join("&", parameters)}";
        };

        return queryString;
    }
}
