@page "/exports/addnew"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@attribute [Authorize(Roles = nameof(Role.StorageWorker))]

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="row col-12">
            <Chase Center="true" Color="#1E90FF" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <EditForm Model="@export" OnValidSubmit="CreateStorageExport" class="formBorder magin-top-15">
                        <DataAnnotationsValidator />
                        <h3 class="text-center h3-style">Create new storage export</h3>
                        <div class="row form-group">
                            <div class="col-3 text-right">
                                <label class="magin-top-5">Product:</label>
                            </div>
                            <div class="col-9">
                                <RadzenDropDown @bind-Value="@export.ProductId"
                                                TextProperty="Text"
                                                ValueProperty="Value"
                                                AllowClear="true"
                                                Placeholder="Select product.."
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowFiltering="true"
                                                Style="width: 90%"
                                                Name="test"
                                                Data="@(products.Select(x => new { Text = $"{x.Name} - {x.Code}", Value = x.Id }))" />
                                <ValidationMessage For="@(() => export.ProductId)" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-3 text-right">
                                <label class="magin-top-5">User:</label>
                            </div>
                            <div class="col-9">
                                <RadzenDropDown @bind-Value="@export.FieldWorkerId"
                                                TextProperty="Text"
                                                ValueProperty="Value"
                                                AllowClear="true"
                                                Placeholder="Select product.."
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.Contains"
                                                AllowFiltering="true"
                                                Style="width: 90%"
                                                Name="test"
                                                Data="@(fieldWorkers.Select(x => new { Text = $"{x.Name} {x.MiddleName} {x.LastName}", Value = x.Id }))" />
                                <ValidationMessage For="@(() => export.FieldWorker)" />
                            </div>
                        </div>
                        <div class="row form-group">
                            <div class="col-3 text-right">
                                <label class="magin-top-5">Quantity:</label>
                            </div>
                            <div class="col-9">
                                <RadzenNumeric Min="1" @bind-Value="@export.Quantity" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6 text-right">
                                <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Danger" Click="Cancel" />
                            </div>
                            <div class="col-6">
                                <RadzenButton type="submit" Text="Create" ButtonStyle="ButtonStyle.Success" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>

@code {
    bool isLoading = true;
    IList<Product> products;
    IList<AppUser> fieldWorkers;
    StorageExport export = new StorageExport();

    protected override async Task OnInitializedAsync()
    {
        products = await _http.GetJsonAsync<IList<Product>>(Routes.Product.Root);

        var queryString = GetQuery(new UserSearchRequest
        {
            Role = Role.FieldWorker
        });
        fieldWorkers = await _http.GetJsonAsync<IList<AppUser>>(Routes.User.Root + queryString);

        isLoading = false;
    }

    async Task CreateStorageExport()
    {
        var notificationMessage = new NotificationMessage
        {
            Summary = "Create storage export:",
            Severity = NotificationSeverity.Error,
            Duration = 4000
        };

        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Post, Routes.StorageExport.Root, export);
        notificationMessage.Detail = actionResult.Message;

        if (actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Success;
            _notificationService.Notify(notificationMessage);
            //await Task.Delay(5000);
            _navigationManager.NavigateTo("/exports");
        }
        else
        {
            _notificationService.Notify(notificationMessage);
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo("/exports");
    }

    private string GetQuery(UserSearchRequest request)
    {
        List<string> parameters = new List<string>();

        if(!string.IsNullOrWhiteSpace(request.Name))
            parameters.Add($"Name={request.Name}");
        if (!string.IsNullOrWhiteSpace(request.LastName))
            parameters.Add($"LastName={request.LastName}");
        if (!string.IsNullOrWhiteSpace(request.Email))
            parameters.Add($"Email={request.Email}");
        if (request.Role.HasValue)
            parameters.Add($"Role={request.Role}");

        var queryString = string.Empty;
        if (parameters.Any())
        {
            queryString = $"?{string.Join("&", parameters)}";
        };

        return queryString;
    }
}
