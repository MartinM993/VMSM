@page "/vendingmachineproducts"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = nameof(Role.OfficeWorker))]

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="row col-12">
            <Chase Center="true" Color="#1E90FF" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <RadzenDropDown @bind-Value="vendingMachineId"
                        TextProperty="Text"
                        ValueProperty="Value"
                        AllowClear="true"
                        Placeholder="Select vending machine.."
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterOperator="StringFilterOperator.Contains"
                        AllowFiltering="true"
                        Style="width: 100%"
                        Data="@(vendingMachines.Select(x => new { Text = $"{x.Name} {x.Model} with code: {x.Code}", Value = x.Id }))">

        </RadzenDropDown>
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Products">
                    <RadzenButton Click="((args) => AddNew())" ButtonStyle="ButtonStyle.Success" Text="Add New" class="magin-bottom-15">
                        <span class="oi oi-plus" aria-hidden="true"></span> Add New Product
                    </RadzenButton>
                    <RadzenGrid @ref="gridProducts"
                                Data="@vendingMachineProducts.Where(x => x.VendingMachineId == vendingMachineId && x.Quantity == 0)"
                                TItem="VendingMachineProduct"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowSorting="true"
                                AllowPaging="true"
                                PageSize="10">
                        <Columns>
                            <RadzenGridColumn TItem="VendingMachineProduct" Property="Product.Name" Title="Name" />
                            <RadzenGridColumn TItem="VendingMachineProduct" Property="Product.Code" Title="Code" />
                            <RadzenGridColumn TItem="VendingMachineProduct" Property="Product.SellingPrice" Title="Selling Price" />
                            <RadzenGridColumn TItem="VendingMachineProduct" Property="Product.SellingPieces" Title="Selling Pieces" />
                            <RadzenGridColumn TItem="VendingMachineProduct" Property="Product.PriceByPiece" Title="Selling Price By Piece" />
                            <RadzenGridColumn TItem="VendingMachineProduct" Context="vendingMachineProduct" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                                <Template Context="vendingMachineProduct">
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete_forever" Size="ButtonSize.Medium" Click="@(args => DeleteRow(vendingMachineProduct))">
                                    </RadzenButton>
                                </Template>
                            </RadzenGridColumn>
                        </Columns>
                    </RadzenGrid>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Products Price">
                    <RadzenButton Click="((args) => AddNewProductsPrice())" ButtonStyle="ButtonStyle.Success" Text="Add New" class="magin-bottom-15">
                        <span class="oi oi-plus" aria-hidden="true"></span> Add New Product Price
                    </RadzenButton>
                    <RadzenGrid @ref="gridProductsPrice"
                                Data="@vendingMachineProductPrices.Where(x => x.VendingMachineId == vendingMachineId)"
                                TItem="VendingMachineProductPrice"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowSorting="true"
                                AllowPaging="true"
                                PageSize="10"
                                RowUpdate="@OnUpdateRow">
                        <Columns>
                            <RadzenGridColumn TItem="VendingMachineProductPrice" Property="Product.Name" Title="Name" />
                            <RadzenGridColumn TItem="VendingMachineProductPrice" Property="Product.Code" Title="Code" />
                            <RadzenGridColumn TItem="VendingMachineProductPrice" Property="Product.SellingPrice" Title="Selling Price" />
                            <RadzenGridColumn TItem="VendingMachineProductPrice" Property="Product.PriceByPiece" Title="Price By Piece" />
                            <RadzenGridColumn TItem="VendingMachineProductPrice" Property="Price" Title="Price in Vending Machine">
                                <EditTemplate Context="productPrice">
                                    <RadzenNumeric TValue="int" Min="0" Max="100000" @bind-Value="@productPrice.Price" Name="Price" Style="width:100%; display: block" />
                                    <RadzenNumericRangeValidator Component="Price" Min="0" Max="100000" Text="Price value should be between 0 and 100000" Popup="true" />
                                    <RadzenRequiredValidator Text="Price is required!" Component="Price" Popup="true" />
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="VendingMachineProductPrice" Context="editableUserGrid" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                                <Template Context="productPrice">
                                    <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(productPrice))" ButtonStyle="ButtonStyle.Secondary"></RadzenButton>
                                </Template>
                                <EditTemplate Context="productPrice">
                                    <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@(args => SaveRow(productPrice))" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                                    <RadzenButton Icon="cancel" Size="ButtonSize.Medium" Click="@(args => CancelEdit(productPrice))" ButtonStyle="ButtonStyle.Danger"></RadzenButton>
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="VendingMachineProductPrice" Context="productPrice" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                                <Template Context="productPrice">
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete_forever" Size="ButtonSize.Medium" Click="@(args => DeleteProductPriceRow(productPrice))">
                                    </RadzenButton>
                                </Template>
                                <EditTemplate Context="productPrice">
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete_forever" Size="ButtonSize.Medium" Click="@(args => DeleteProductPriceRow(productPrice))">
                                    </RadzenButton>
                                </EditTemplate>
                            </RadzenGridColumn>
                        </Columns>
                    </RadzenGrid>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </ContentTemplate>
</SpinLoader>

@code {
    bool isLoading = true;
    int vendingMachineId;
    IList<VendingMachineProduct> vendingMachineProducts;
    IList<VendingMachine> vendingMachines;
    IList<VendingMachineProductPrice> vendingMachineProductPrices;
    RadzenGrid<VendingMachineProduct> gridProducts;
    RadzenGrid<VendingMachineProductPrice> gridProductsPrice;

    protected override async Task OnInitializedAsync()
    {
        vendingMachineProducts = await _http.GetJsonAsync<IList<VendingMachineProduct>>(Routes.VendingMachineProduct.Root);
        vendingMachines = await _http.GetJsonAsync<IList<VendingMachine>>(Routes.VendingMachine.Root);
        vendingMachineProductPrices = await _http.GetJsonAsync<IList<VendingMachineProductPrice>>(Routes.VendingMachineProductPrice.Root);

        vendingMachineProducts = vendingMachineProducts.GroupBy(x => new { x.ProductId, x.VendingMachineId}).Select(x => x.First()).ToList();
        isLoading = false;
        StateHasChanged();
    }

    void AddNew()
    {
        _navigationManager.NavigateTo("/vendingmachineproducts/addnew");
    }

    void AddNewProductsPrice()
    {
        _navigationManager.NavigateTo("/vendingmachineproducts/addnewproductsprice");
    }

    async Task DeleteRow(VendingMachineProduct product)
    {
        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"{product.Product.Name} with code: {product.Product.Code} will be removed from Vending Machine with code: {product.VendingMachine.Code}, are you sure?");
        var notificationMessage = new NotificationMessage
        {
            Summary = "Delete vending machine product:",
            Severity = NotificationSeverity.Success,
            Duration = 4000
        };

        if (confirmed)
        {
            var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Delete, Routes.VendingMachineProduct.ById.Replace("{id}", product.Id.ToString()), product);
            notificationMessage.Detail = actionResult.Message;
            vendingMachineProducts.Remove(product);

            if (!actionResult.Successful)
            {
                notificationMessage.Severity = NotificationSeverity.Error;
            }

            _notificationService.Notify(notificationMessage);
        }

        gridProducts.Reload();
    }

    void EditRow(VendingMachineProductPrice productPrice)
    {
        gridProductsPrice.EditRow(productPrice);
    }

    async Task OnUpdateRow(VendingMachineProductPrice productPrice)
    {
        var notificationMessage = new NotificationMessage
        {
            Summary = "Update product price:",
            Severity = NotificationSeverity.Success,
            Duration = 4000
        };

        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Put, Routes.VendingMachineProductPrice.ById.Replace("{id}", productPrice.Id.ToString()), productPrice);
        notificationMessage.Detail = actionResult.Message;

        if (!actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Error;
        }

        _notificationService.Notify(notificationMessage);
        StateHasChanged();
    }

    void SaveRow(VendingMachineProductPrice productPrice)
    {
        gridProductsPrice.UpdateRow(productPrice);
    }

    void CancelEdit(VendingMachineProductPrice productPrice)
    {
        gridProductsPrice.CancelEditRow(productPrice);
    }

    async Task DeleteProductPriceRow(VendingMachineProductPrice productPrice)
    {
        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"Price for {productPrice.Product.Name} with code: {productPrice.Product.Code} will be removed for vending machine {productPrice.VendingMachine.Name} with code {productPrice.VendingMachine.Code}, are you sure?");
        var notificationMessage = new NotificationMessage
        {
            Summary = "Delete vending machine product price:",
            Severity = NotificationSeverity.Success,
            Duration = 4000
        };

        if (confirmed)
        {
            var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Delete, Routes.VendingMachineProductPrice.ById.Replace("{id}", productPrice.Id.ToString()), productPrice);
            notificationMessage.Detail = actionResult.Message;
            vendingMachineProductPrices.Remove(productPrice);

            if (!actionResult.Successful)
            {
                notificationMessage.Severity = NotificationSeverity.Error;
            }

            _notificationService.Notify(notificationMessage);
        }

        gridProductsPrice.Reload();
    }
}
