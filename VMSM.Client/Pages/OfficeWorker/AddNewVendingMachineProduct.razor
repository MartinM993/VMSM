@page "/vendingmachineproducts/addnew"
@inject HttpClient _http
@inject NavigationManager _navigationManager
@inject NotificationService _notificationService
@attribute [Authorize(Roles = nameof(Role.OfficeWorker))]

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <div class="row col-12">
            <Chase Center="true" Color="#1E90FF" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <AddProductInVendingMachine Product="@product"
                                    VendingMachines="@vendingMachines"
                                    Products="@products"
                                    UserRole="Role.OfficeWorker"
                                    OnValidSubmit="@CreateProduct"
                                    OnCancel="@Cancel" />
    </ContentTemplate>
</SpinLoader>

@code {
    bool isLoading = true;
    IList<VendingMachine> vendingMachines;
    IList<Product> products;
    VendingMachineProduct product = new VendingMachineProduct();

    protected override async Task OnInitializedAsync()
    {
        products = await _http.GetJsonAsync<IList<Product>>(Routes.Product.Root);
        vendingMachines = await _http.GetJsonAsync<IList<VendingMachine>>(Routes.VendingMachine.Root);

        isLoading = false;
        StateHasChanged();
    }

    async Task CreateProduct()
    {
        var notificationMessage = new NotificationMessage
        {
            Summary = "Create vending machine product:",
            Severity = NotificationSeverity.Error,
            Duration = 4000
        };

        var actionResult = await _http.SendJsonAsync<CustomActionResult>(HttpMethod.Post, Routes.VendingMachineProduct.Root, product);
        notificationMessage.Detail = actionResult.Message;

        if (actionResult.Successful)
        {
            notificationMessage.Severity = NotificationSeverity.Success;
            _notificationService.Notify(notificationMessage);
            //await Task.Delay(5000);
            _navigationManager.NavigateTo("/vendingmachineproducts");
        }
        else
        {
            _notificationService.Notify(notificationMessage);
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo("/vendingmachineproducts");
    }
}
