@inject HttpClient _http
@attribute [Authorize]
@using VMSM.Client.Shared.RoleNavMenu

<div class="top-row pl-4 navbar navbar-dark" style="min-width: 250px">
    <a class="navbar-brand oi oi-person" href="/user/@id"> @name @lastName</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @if (role == Role.Admin)
        {
            <AdminNavMenu></AdminNavMenu>
        }
        else if (role == Role.OfficeWorker)
        {
            <OfficeWorkerNavMenu></OfficeWorkerNavMenu>
        }
        else if (role == Role.FieldWorker)
        {
            <FieldWorkerNavMenu></FieldWorkerNavMenu>
        }
        else if (role == Role.StorageWorker)
        {
            <StorageWorkerNavMenu></StorageWorkerNavMenu>
        }
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="logout">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private string name = string.Empty;
    private string lastName = string.Empty;
    private Role role;
    private int id = 0;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await _http.GetJsonAsync<AppUser>(Routes.User.CurrentLoggedUser);

        name = user.Name;
        lastName = user.LastName;
        id = user.Id;
        role = user.UserRole;
    }
}
